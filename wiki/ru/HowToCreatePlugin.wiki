#summary Описание процесса создания собственного плагина.

== Теория ==

Плагины ruTorrent располагаются внутри директории plugins. Каждому плагину должна соответствовать директория с уникальным именем, в которой, собственно, файлы плагина и лежат. Среди этих файлов должен быть, по крайней мере, один с именем init.js и/или init.php. Файл init.php просто выполняется при загрузке ruTorrent. Обычно он содержит какую-либо инициализацию, требующую проверки состояния rTorrent на данный момент - например, там может проверяться версия rTorrent, выдаваться указания планировщику, частично формироваться внедряемый javascript. Содержимое же файла init.js полностью внедряется в код ruTorrent в момент загрузки пользователем последнего. Т.е. это хорошее место для для замены или добавления логики в скрипт ruTorrent.

Имеется способ управления порядком загрузки плагинов. Каждому плагину поставлено в соответствие число - его номер в очереди загрузки. Данное число должно находиться в файле плагина с именем runlevel.info. Если этот файл отсутствует, то считается, что номер в очереди загрузки для данного плагина равен 10. Плагины с меньшим номером загружаются раньше, с бОльшим, соответственно, позже.

== Практика ==

==== Меняем цвета на диаграмме скорости ====

Итак, цвета линий на диаграмме скорости задаются переменными down.color и up.color экземпляра объекта rSpeedGraph. Самый простой способ задать собственные цвета - поменять значения этих переменных непосредственно в исходнике, файле graph.js. Однако этот путь плох тем, что такую операцию придется проделывать каждый раз после простановки новой версии ruTorrent. Поэтому напишем собственный плагин, который будет вносить необходимые коррективы. Вариантов реализации идеи несколько. Можно, например, целиком заменить в плагине конструктор объекта rSpeedGraph. Но данный метод предполагает, что в будущих версиях этот конструктор останется неизменным, что не очень хорошо. Поэтому будем работать непосредственно с экземпляром объекта rSpeedGraph, он создается внутри метода utWebUI.init в файле script.js:
{{{
this.speedGraph = new rSpeedGraph();
}}} 
Казалось бы, можно заменить utWebUI.init, внутри собственной реализации вызвать "родной" init, а потом внести необходимые коррективы. Но - не выйдет, так как на момент внедрения скрипта плагина данный метод уже отработал. Поэтому проделаем похожую операцию с методом utWebUI.initDone, который вызывается в конце инициализации ruTorrent, после внедрения кода скрипта плагина. Плагин будет состоять из единственного файла init.js. Создадим для него директорию внутри plugins, например, с именем speedcolor. Ниже приведено содержимое файла init.js с комментариями.
{{{
// запоминаем предыдущий обработчик
utWebUI.changeSpeedColorsInitDone = utWebUI.initDone;

// устанавливаем свой
utWebUI.initDone = function() 
{
	// вызываем родной обработчик
	this.changeSpeedColorsInitDone();
	// исправляем цвета
	this.speedGraph.down.color = "#FF0000";
	this.speedGraph.up.color = "#00FF00";
}
}}}
Перегружаем ruTorrent, и вот результат:

[http://rutorrent.googlecode.com/svn/wiki/images/speedcolor.jpg]

==== Меняем цвета маркеров в плагине [PluginScheduler scheduler] ====

Эта задача немного посложнее предыдущей. Во первых, может отсутствовать предмет замены, если плагин [PluginScheduler scheduler] попросту не установлен. И это хорошо бы проверять. Во вторых, цвета маркеров определяются в данном случае не переменными, а содержимым css файла плагина [PluginScheduler scheduler], конкретно - полем background селекторов .sch_fast, .sch_res1, .sch_res2, .sch_res3, .sch_stop и .sch_seed. Данный css подгружается динамически, при этом пока он не загрузится - никаких действий производить нельзя. 

Для того, чтобы проверить первое условие, нам нужно обеспечить, чтобы новый плагин загружался после плагина [PluginScheduler scheduler], а не до него - иначе будет не на что опереться при проверке. Для этого в директории нового плагина должен присутствовать файл с именем runlevel.info содержащий число, большее 10. Для прочей работы достаточно, опять таки, единственного файла init.js:

{{{
utWebUI.waitForSchedulerCSSLoaded = function()
{
	var rule = getCSSRule(".sch_fast");
	if(rule)
	{
		// css уже загрузился, меняем цвета
		rule.style.background = "#FF0000";
		rule = getCSSRule(".sch_res1");
		if(rule)
			rule.style.background = "#00FF00";
		rule = getCSSRule(".sch_res2");
		if(rule)
			rule.style.background = "#0000FF";
		rule = getCSSRule(".sch_res3");
		if(rule)
			rule.style.background = "#770000";
		rule = getCSSRule(".sch_stop");
		if(rule)
			rule.style.background = "#007700";
		rule = getCSSRule(".sch_seed");
		if(rule)
			rule.style.background = "#000077";
        }
	else
	{
		// css еще не загрузился, ждем
		setTimeout('utWebUI.waitForSchedulerCSSLoaded()',1000);
        }
}

// проверяем - установлен ли плагин scheduler.
// если таки да - начинаем ждать загрузки его css.
if(typeof utWebUI.schedulerCreate != "undefined")
	utWebUI.waitForSchedulerCSSLoaded();	
}}}
Перегружаем ruTorrent, и вот результат:

[http://rutorrent.googlecode.com/svn/wiki/ru/images/schedcolor.jpg]